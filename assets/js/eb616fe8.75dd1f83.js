"use strict";(self.webpackChunkfields_docs=self.webpackChunkfields_docs||[]).push([[642],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=r.createContext({}),u=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(o.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(t),m=a,f=d["".concat(o,".").concat(m)]||d[m]||p[m]||i;return t?r.createElement(f,l(l({ref:n},c),{},{components:t})):r.createElement(f,l({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=d;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var u=2;u<i;u++)l[u]=t[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},191:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return o},default:function(){return m},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return p}});var r=t(7462),a=t(3366),i=(t(7294),t(3905)),l=["components"],s={},o="Syntax",u={unversionedId:"validation-syntax",id:"validation-syntax",title:"Syntax",description:"Here is complete list of predefined validation syntax.",source:"@site/../fields-docs/target/mdoc/validation-syntax.md",sourceDirName:".",slug:"/validation-syntax",permalink:"/fields/docs/validation-syntax",draft:!1,editUrl:"https://github.com/jap-company/fields/tree/master/docs/validation-syntax.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"FailWith",permalink:"/fields/docs/fail-with"},next:{title:"ValidationModule",permalink:"/fields/docs/validation-module"}},c={},p=[{value:"Generic",id:"generic",level:2},{value:"Boolean",id:"boolean",level:2},{value:"Numeric",id:"numeric",level:2},{value:"Option",id:"option",level:2},{value:"String",id:"string",level:2},{value:"Iterable",id:"iterable",level:2},{value:"Map",id:"map",level:2}],d={toc:p};function m(e){var n=e.components,t=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"syntax"},"Syntax"),(0,i.kt)("p",null,"Here is complete list of predefined validation syntax."),(0,i.kt)("h2",{id:"generic"},"Generic"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'val request: Request = ???\nval requestF: Field[Request] = Field(request)\nrequestF.assertTrue(false, _.invalidError)\nrequestF.assert(_.isValid, _.invalidError)\nrequestF.check(f => Accumulate.invalid(f.invalidError).unless(f.value.isValid))\ndef isRequestValidApi: zio.Task[Boolean] = ???\nrequestF.assertF(isRequestValidApi, _.invalid)\nrequestF.checkF(f => isRequestValidApi(f.value).map(Accumulate.unless(_)(c.custom("err"))))\nrequestF === request\nrequestF equalTo request\nrequestF !== request\nrequestF notEqualTo request\nrequestF === requestF\nrequestF equalTo requestF\nrequestF !== requestF\nrequestF notEqualTo requestF\nrequestF in List(request)\nrequestF.all(_ === request, !== request) // runs all validations and combines them using and\nrequestF.any(_ === request, !== request) // runs all validations and combines them using or\nrequestF.when(true)(_ === request) // runs if cond is true\nrequestF.unless(false)(_ === request) // runs if cond is false\nrequestF validate //uses ValidationPolicy\n')),(0,i.kt)("h2",{id:"boolean"},"Boolean"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"val boolF: Field[Boolean] = ???\nboolF.isTrue\nboolF.isFalse\n")),(0,i.kt)("h2",{id:"numeric"},"Numeric"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"val intF: Field[Int] = ???\ninfF.isBetween(0, 5)\ninfF < 10\ninfF lt 10\ninfF <= 10\ninfF lte 10\ninfF >= 10\ninfF gte 10\ninfF > 10\ninfF gt 10\n")),(0,i.kt)("h2",{id:"option"},"Option"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"val optionF: Field[Option[Int]] = ???\noptionF.isDefined\noptionF.isEmpty\noptionF.some(_ > 10)\n")),(0,i.kt)("h2",{id:"string"},"String"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'val stringF: Field[String] = ???\nstringF.startsWith("sca")\nstringF.endsWith("la")\nstringF.nonEmpty\nstringF.nonBlank\nstringF.minSize(5)\nstringF.maxSize(5)\nstringF.blank\nstringF.matches("scala".r)\nstringF.matches("scala")\nstringF.isEnum(ScalaEnumeration)\nstringF.isJEnum(JavaEnumeration.values())\n')),(0,i.kt)("h2",{id:"iterable"},"Iterable"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"val listF: Field[List[Int]] = ???\nlistF.each(_ > 10)\nlistF.any(_ > 10)\nlistF.nonEmpty\nlistF.minSize(1)\nlistF.maxSize(10)\n")),(0,i.kt)("h2",{id:"map"},"Map"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"val mapF: Field[Map[String, Int]] = ???\nmapF.minSize(1)\nmapF.maxSize(10)\nmapF.each(_._2 > 3)\nmapF.eachKey(_.nonEmpty)\nmapF.eachValue(_ > 3)\nmapF.any(_._2 > 3)\nmapF.anyKey(_.nonEmpty)\nmapF.anyValue(_ > 3)\n")))}m.isMDXComponent=!0}}]);